{
  "contractName": "LibAbiEncoder",
  "abi": [],
  "bytecode": "0x6080604052348015600f57600080fd5b50604380601d6000396000f3006080604052600080fd00a265627a7a72305820be4189aeae8da2d44c6523ae27323b6ccb46e1b02442615375bed63082a732f36c6578706572696d656e74616cf50037",
  "deployedBytecode": "0x6080604052600080fd00a265627a7a72305820be4189aeae8da2d44c6523ae27323b6ccb46e1b02442615375bed63082a732f36c6578706572696d656e74616cf50037",
  "sourceMap": "666:10446:60:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;666:10446:60;;;;;;;",
  "deployedSourceMap": "666:10446:60:-;;;;;",
  "source": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nimport \"./LibOrder.sol\";\n\n\ncontract LibAbiEncoder {\n\n    /// @dev ABI encodes calldata for `fillOrder`.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return ABI encoded calldata for `fillOrder`.\n    function abiEncodeFillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory fillOrderCalldata)\n    {\n        // We need to call MExchangeCore.fillOrder using a delegatecall in\n        // assembly so that we can intercept a call that throws. For this, we\n        // need the input encoded in memory in the Ethereum ABIv2 format [1].\n\n        // | Area     | Offset | Length  | Contents                                    |\n        // | -------- |--------|---------|-------------------------------------------- |\n        // | Header   | 0x00   | 4       | function selector                           |\n        // | Params   |        | 3 * 32  | function parameters:                        |\n        // |          | 0x00   |         |   1. offset to order (*)                    |\n        // |          | 0x20   |         |   2. takerAssetFillAmount                   |\n        // |          | 0x40   |         |   3. offset to signature (*)                |\n        // | Data     |        | 12 * 32 | order:                                      |\n        // |          | 0x000  |         |   1.  senderAddress                         |\n        // |          | 0x020  |         |   2.  makerAddress                          |\n        // |          | 0x040  |         |   3.  takerAddress                          |\n        // |          | 0x060  |         |   4.  feeRecipientAddress                   |\n        // |          | 0x080  |         |   5.  makerAssetAmount                      |\n        // |          | 0x0A0  |         |   6.  takerAssetAmount                      |\n        // |          | 0x0C0  |         |   7.  makerFeeAmount                        |\n        // |          | 0x0E0  |         |   8.  takerFeeAmount                        |\n        // |          | 0x100  |         |   9.  expirationTimeSeconds                 |\n        // |          | 0x120  |         |   10. salt                                  |\n        // |          | 0x140  |         |   11. Offset to makerAssetData (*)          |\n        // |          | 0x160  |         |   12. Offset to takerAssetData (*)          |\n        // |          | 0x180  | 32      | makerAssetData Length                       |\n        // |          | 0x1A0  | **      | makerAssetData Contents                     |\n        // |          | 0x1C0  | 32      | takerAssetData Length                       |\n        // |          | 0x1E0  | **      | takerAssetData Contents                     |\n        // |          | 0x200  | 32      | signature Length                            |\n        // |          | 0x220  | **      | signature Contents                          |\n\n        // * Offsets are calculated from the beginning of the current area: Header, Params, Data:\n        //     An offset stored in the Params area is calculated from the beginning of the Params section.\n        //     An offset stored in the Data area is calculated from the beginning of the Data section.\n\n        // ** The length of dynamic array contents are stored in the field immediately preceeding the contents.\n\n        // [1]: https://solidity.readthedocs.io/en/develop/abi-spec.html\n\n        assembly {\n\n            // Areas below may use the following variables:\n            //   1. <area>Start   -- Start of this area in memory\n            //   2. <area>End     -- End of this area in memory. This value may\n            //                       be precomputed (before writing contents),\n            //                       or it may be computed as contents are written.\n            //   3. <area>Offset  -- Current offset into area. If an area's End\n            //                       is precomputed, this variable tracks the\n            //                       offsets of contents as they are written.\n\n            /////// Setup Header Area ///////\n            // Load free memory pointer\n            fillOrderCalldata := mload(0x40)\n            // bytes4(keccak256(\"fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)\"))\n            // = 0xb4be83d5\n            // Leave 0x20 bytes to store the length\n            mstore(add(fillOrderCalldata, 0x20), 0xb4be83d500000000000000000000000000000000000000000000000000000000)\n            let headerAreaEnd := add(fillOrderCalldata, 0x24)\n\n            /////// Setup Params Area ///////\n            // This area is preallocated and written to later.\n            // This is because we need to fill in offsets that have not yet been calculated.\n            let paramsAreaStart := headerAreaEnd\n            let paramsAreaEnd := add(paramsAreaStart, 0x60)\n            let paramsAreaOffset := paramsAreaStart\n\n            /////// Setup Data Area ///////\n            let dataAreaStart := paramsAreaEnd\n            let dataAreaEnd := dataAreaStart\n\n            // Offset from the source data we're reading from\n            let sourceOffset := order\n            // arrayLenBytes and arrayLenWords track the length of a dynamically-allocated bytes array.\n            let arrayLenBytes := 0\n            let arrayLenWords := 0\n\n            /////// Write order Struct ///////\n            // Write memory location of Order, relative to the start of the\n            // parameter list, then increment the paramsAreaOffset respectively.\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            // Write values for each field in the order\n            // It would be nice to use a loop, but we save on gas by writing\n            // the stores sequentially.\n            mstore(dataAreaEnd, mload(sourceOffset))                            // makerAddress\n            mstore(add(dataAreaEnd, 0x20), mload(add(sourceOffset, 0x20)))      // takerAddress\n            mstore(add(dataAreaEnd, 0x40), mload(add(sourceOffset, 0x40)))      // feeRecipientAddress\n            mstore(add(dataAreaEnd, 0x60), mload(add(sourceOffset, 0x60)))      // senderAddress\n            mstore(add(dataAreaEnd, 0x80), mload(add(sourceOffset, 0x80)))      // makerAssetAmount\n            mstore(add(dataAreaEnd, 0xA0), mload(add(sourceOffset, 0xA0)))      // takerAssetAmount\n            mstore(add(dataAreaEnd, 0xC0), mload(add(sourceOffset, 0xC0)))      // makerFeeAmount\n            mstore(add(dataAreaEnd, 0xE0), mload(add(sourceOffset, 0xE0)))      // takerFeeAmount\n            mstore(add(dataAreaEnd, 0x100), mload(add(sourceOffset, 0x100)))    // expirationTimeSeconds\n            mstore(add(dataAreaEnd, 0x120), mload(add(sourceOffset, 0x120)))    // salt\n            mstore(add(dataAreaEnd, 0x140), mload(add(sourceOffset, 0x140)))    // Offset to makerAssetData\n            mstore(add(dataAreaEnd, 0x160), mload(add(sourceOffset, 0x160)))    // Offset to takerAssetData\n            dataAreaEnd := add(dataAreaEnd, 0x180)\n            sourceOffset := add(sourceOffset, 0x180)\n\n            // Write offset to <order.makerAssetData>\n            mstore(add(dataAreaStart, mul(10, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.makerAssetData>\n            sourceOffset := mload(add(order, 0x140)) // makerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.makerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of <order.makerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Write offset to <order.takerAssetData>\n            mstore(add(dataAreaStart, mul(11, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.takerAssetData>\n            sourceOffset := mload(add(order, 0x160)) // takerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.takerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of  <order.takerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            /////// Write takerAssetFillAmount ///////\n            mstore(paramsAreaOffset, takerAssetFillAmount)\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            /////// Write signature ///////\n            // Write offset to paramsArea\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n\n            // Calculate length of signature\n            sourceOffset := signature\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of signature\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of signature\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Set length of calldata\n            mstore(fillOrderCalldata, sub(dataAreaEnd, add(fillOrderCalldata, 0x20)))\n\n            // Increment free memory pointer\n            mstore(0x40, dataAreaEnd)\n        }\n\n        return fillOrderCalldata;\n    }\n}\n",
  "sourcePath": "/Users/facu/Documents/Laburo/Spiking/Ethereum/0x/0x-monorepo/packages/contracts/contracts/2.0.0/protocol/Exchange/libs/LibAbiEncoder.sol",
  "ast": {
    "absolutePath": "/Users/facu/Documents/Laburo/Spiking/Ethereum/0x/0x-monorepo/packages/contracts/contracts/2.0.0/protocol/Exchange/libs/LibAbiEncoder.sol",
    "exportedSymbols": {
      "LibAbiEncoder": [
        11806
      ]
    },
    "id": 11807,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11788,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:23:60"
      },
      {
        "id": 11789,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "604:33:60"
      },
      {
        "absolutePath": "/Users/facu/Documents/Laburo/Spiking/Ethereum/0x/0x-monorepo/packages/contracts/contracts/2.0.0/protocol/Exchange/libs/LibOrder.sol",
        "file": "./LibOrder.sol",
        "id": 11790,
        "nodeType": "ImportDirective",
        "scope": 11807,
        "sourceUnit": 12434,
        "src": "639:24:60",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 11806,
        "linearizedBaseContracts": [
          11806
        ],
        "name": "LibAbiEncoder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 11804,
              "nodeType": "Block",
              "src": "1235:9875:60",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "fillOrderCalldata": {
                        "declaration": 11799,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "5004:17:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "fillOrderCalldata": {
                        "declaration": 11799,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "5295:17:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "fillOrderCalldata": {
                        "declaration": 11799,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "5426:17:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "order": {
                        "declaration": 11792,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "6047:5:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "order": {
                        "declaration": 11792,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9175:5:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "order": {
                        "declaration": 11792,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8278:5:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "takerAssetFillAmount": {
                        "declaration": 11794,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9927:20:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "signature": {
                        "declaration": 11796,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "10242:9:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "fillOrderCalldata": {
                        "declaration": 11799,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "10949:17:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "fillOrderCalldata": {
                        "declaration": 11799,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "10909:17:60",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 11801,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    fillOrderCalldata := mload(0x40)\n    mstore(add(fillOrderCalldata, 0x20), 0xb4be83d500000000000000000000000000000000000000000000000000000000)\n    let headerAreaEnd := add(fillOrderCalldata, 0x24)\n    let paramsAreaStart := headerAreaEnd\n    let paramsAreaEnd := add(paramsAreaStart, 0x60)\n    let paramsAreaOffset := paramsAreaStart\n    let dataAreaStart := paramsAreaEnd\n    let dataAreaEnd := dataAreaStart\n    let sourceOffset := order\n    let arrayLenBytes := 0\n    let arrayLenWords := 0\n    mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n    paramsAreaOffset := add(paramsAreaOffset, 0x20)\n    mstore(dataAreaEnd, mload(sourceOffset))\n    mstore(add(dataAreaEnd, 0x20), mload(add(sourceOffset, 0x20)))\n    mstore(add(dataAreaEnd, 0x40), mload(add(sourceOffset, 0x40)))\n    mstore(add(dataAreaEnd, 0x60), mload(add(sourceOffset, 0x60)))\n    mstore(add(dataAreaEnd, 0x80), mload(add(sourceOffset, 0x80)))\n    mstore(add(dataAreaEnd, 0xA0), mload(add(sourceOffset, 0xA0)))\n    mstore(add(dataAreaEnd, 0xC0), mload(add(sourceOffset, 0xC0)))\n    mstore(add(dataAreaEnd, 0xE0), mload(add(sourceOffset, 0xE0)))\n    mstore(add(dataAreaEnd, 0x100), mload(add(sourceOffset, 0x100)))\n    mstore(add(dataAreaEnd, 0x120), mload(add(sourceOffset, 0x120)))\n    mstore(add(dataAreaEnd, 0x140), mload(add(sourceOffset, 0x140)))\n    mstore(add(dataAreaEnd, 0x160), mload(add(sourceOffset, 0x160)))\n    dataAreaEnd := add(dataAreaEnd, 0x180)\n    sourceOffset := add(sourceOffset, 0x180)\n    mstore(add(dataAreaStart, mul(10, 0x20)), sub(dataAreaEnd, dataAreaStart))\n    sourceOffset := mload(add(order, 0x140))\n    arrayLenBytes := mload(sourceOffset)\n    sourceOffset := add(sourceOffset, 0x20)\n    arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n    mstore(dataAreaEnd, arrayLenBytes)\n    dataAreaEnd := add(dataAreaEnd, 0x20)\n    for {\n        let i := 0\n    }\n    lt(i, arrayLenWords)\n    {\n        i := add(i, 1)\n    }\n    {\n        mstore(dataAreaEnd, mload(sourceOffset))\n        dataAreaEnd := add(dataAreaEnd, 0x20)\n        sourceOffset := add(sourceOffset, 0x20)\n    }\n    mstore(add(dataAreaStart, mul(11, 0x20)), sub(dataAreaEnd, dataAreaStart))\n    sourceOffset := mload(add(order, 0x160))\n    arrayLenBytes := mload(sourceOffset)\n    sourceOffset := add(sourceOffset, 0x20)\n    arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n    mstore(dataAreaEnd, arrayLenBytes)\n    dataAreaEnd := add(dataAreaEnd, 0x20)\n    for {\n        let i := 0\n    }\n    lt(i, arrayLenWords)\n    {\n        i := add(i, 1)\n    }\n    {\n        mstore(dataAreaEnd, mload(sourceOffset))\n        dataAreaEnd := add(dataAreaEnd, 0x20)\n        sourceOffset := add(sourceOffset, 0x20)\n    }\n    mstore(paramsAreaOffset, takerAssetFillAmount)\n    paramsAreaOffset := add(paramsAreaOffset, 0x20)\n    mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n    sourceOffset := signature\n    arrayLenBytes := mload(sourceOffset)\n    sourceOffset := add(sourceOffset, 0x20)\n    arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n    mstore(dataAreaEnd, arrayLenBytes)\n    dataAreaEnd := add(dataAreaEnd, 0x20)\n    for {\n        let i := 0\n    }\n    lt(i, arrayLenWords)\n    {\n        i := add(i, 1)\n    }\n    {\n        mstore(dataAreaEnd, mload(sourceOffset))\n        dataAreaEnd := add(dataAreaEnd, 0x20)\n        sourceOffset := add(sourceOffset, 0x20)\n    }\n    mstore(fillOrderCalldata, sub(dataAreaEnd, add(fillOrderCalldata, 0x20)))\n    mstore(0x40, dataAreaEnd)\n}",
                  "src": "4288:6797:60"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 11802,
                    "name": "fillOrderCalldata",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 11799,
                    "src": "11086:17:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "functionReturnParameters": 11800,
                  "id": 11803,
                  "nodeType": "Return",
                  "src": "11079:24:60"
                }
              ]
            },
            "documentation": "@dev ABI encodes calldata for `fillOrder`.\n @param order Order struct containing order specifications.\n @param takerAssetFillAmount Desired amount of takerAsset to sell.\n @param signature Proof that order has been created by maker.\n @return ABI encoded calldata for `fillOrder`.",
            "id": 11805,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "abiEncodeFillOrder",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11797,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11792,
                  "name": "order",
                  "nodeType": "VariableDeclaration",
                  "scope": 11805,
                  "src": "1048:27:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Order_$12378_memory_ptr",
                    "typeString": "struct LibOrder.Order"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 11791,
                    "name": "LibOrder.Order",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 12378,
                    "src": "1048:14:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$12378_storage_ptr",
                      "typeString": "struct LibOrder.Order"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11794,
                  "name": "takerAssetFillAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 11805,
                  "src": "1085:28:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11793,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1085:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11796,
                  "name": "signature",
                  "nodeType": "VariableDeclaration",
                  "scope": 11805,
                  "src": "1123:22:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11795,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1123:5:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1038:113:60"
            },
            "payable": false,
            "returnParameters": {
              "id": 11800,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11799,
                  "name": "fillOrderCalldata",
                  "nodeType": "VariableDeclaration",
                  "scope": 11805,
                  "src": "1199:30:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11798,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1199:5:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1198:32:60"
            },
            "scope": 11806,
            "src": "1011:10099:60",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 11807,
        "src": "666:10446:60"
      }
    ],
    "src": "580:10533:60"
  },
  "legacyAST": {
    "absolutePath": "/Users/facu/Documents/Laburo/Spiking/Ethereum/0x/0x-monorepo/packages/contracts/contracts/2.0.0/protocol/Exchange/libs/LibAbiEncoder.sol",
    "exportedSymbols": {
      "LibAbiEncoder": [
        11806
      ]
    },
    "id": 11807,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11788,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:23:60"
      },
      {
        "id": 11789,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "604:33:60"
      },
      {
        "absolutePath": "/Users/facu/Documents/Laburo/Spiking/Ethereum/0x/0x-monorepo/packages/contracts/contracts/2.0.0/protocol/Exchange/libs/LibOrder.sol",
        "file": "./LibOrder.sol",
        "id": 11790,
        "nodeType": "ImportDirective",
        "scope": 11807,
        "sourceUnit": 12434,
        "src": "639:24:60",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 11806,
        "linearizedBaseContracts": [
          11806
        ],
        "name": "LibAbiEncoder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 11804,
              "nodeType": "Block",
              "src": "1235:9875:60",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "fillOrderCalldata": {
                        "declaration": 11799,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "5004:17:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "fillOrderCalldata": {
                        "declaration": 11799,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "5295:17:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "fillOrderCalldata": {
                        "declaration": 11799,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "5426:17:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "order": {
                        "declaration": 11792,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "6047:5:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "order": {
                        "declaration": 11792,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9175:5:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "order": {
                        "declaration": 11792,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8278:5:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "takerAssetFillAmount": {
                        "declaration": 11794,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9927:20:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "signature": {
                        "declaration": 11796,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "10242:9:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "fillOrderCalldata": {
                        "declaration": 11799,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "10949:17:60",
                        "valueSize": 1
                      }
                    },
                    {
                      "fillOrderCalldata": {
                        "declaration": 11799,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "10909:17:60",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 11801,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    fillOrderCalldata := mload(0x40)\n    mstore(add(fillOrderCalldata, 0x20), 0xb4be83d500000000000000000000000000000000000000000000000000000000)\n    let headerAreaEnd := add(fillOrderCalldata, 0x24)\n    let paramsAreaStart := headerAreaEnd\n    let paramsAreaEnd := add(paramsAreaStart, 0x60)\n    let paramsAreaOffset := paramsAreaStart\n    let dataAreaStart := paramsAreaEnd\n    let dataAreaEnd := dataAreaStart\n    let sourceOffset := order\n    let arrayLenBytes := 0\n    let arrayLenWords := 0\n    mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n    paramsAreaOffset := add(paramsAreaOffset, 0x20)\n    mstore(dataAreaEnd, mload(sourceOffset))\n    mstore(add(dataAreaEnd, 0x20), mload(add(sourceOffset, 0x20)))\n    mstore(add(dataAreaEnd, 0x40), mload(add(sourceOffset, 0x40)))\n    mstore(add(dataAreaEnd, 0x60), mload(add(sourceOffset, 0x60)))\n    mstore(add(dataAreaEnd, 0x80), mload(add(sourceOffset, 0x80)))\n    mstore(add(dataAreaEnd, 0xA0), mload(add(sourceOffset, 0xA0)))\n    mstore(add(dataAreaEnd, 0xC0), mload(add(sourceOffset, 0xC0)))\n    mstore(add(dataAreaEnd, 0xE0), mload(add(sourceOffset, 0xE0)))\n    mstore(add(dataAreaEnd, 0x100), mload(add(sourceOffset, 0x100)))\n    mstore(add(dataAreaEnd, 0x120), mload(add(sourceOffset, 0x120)))\n    mstore(add(dataAreaEnd, 0x140), mload(add(sourceOffset, 0x140)))\n    mstore(add(dataAreaEnd, 0x160), mload(add(sourceOffset, 0x160)))\n    dataAreaEnd := add(dataAreaEnd, 0x180)\n    sourceOffset := add(sourceOffset, 0x180)\n    mstore(add(dataAreaStart, mul(10, 0x20)), sub(dataAreaEnd, dataAreaStart))\n    sourceOffset := mload(add(order, 0x140))\n    arrayLenBytes := mload(sourceOffset)\n    sourceOffset := add(sourceOffset, 0x20)\n    arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n    mstore(dataAreaEnd, arrayLenBytes)\n    dataAreaEnd := add(dataAreaEnd, 0x20)\n    for {\n        let i := 0\n    }\n    lt(i, arrayLenWords)\n    {\n        i := add(i, 1)\n    }\n    {\n        mstore(dataAreaEnd, mload(sourceOffset))\n        dataAreaEnd := add(dataAreaEnd, 0x20)\n        sourceOffset := add(sourceOffset, 0x20)\n    }\n    mstore(add(dataAreaStart, mul(11, 0x20)), sub(dataAreaEnd, dataAreaStart))\n    sourceOffset := mload(add(order, 0x160))\n    arrayLenBytes := mload(sourceOffset)\n    sourceOffset := add(sourceOffset, 0x20)\n    arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n    mstore(dataAreaEnd, arrayLenBytes)\n    dataAreaEnd := add(dataAreaEnd, 0x20)\n    for {\n        let i := 0\n    }\n    lt(i, arrayLenWords)\n    {\n        i := add(i, 1)\n    }\n    {\n        mstore(dataAreaEnd, mload(sourceOffset))\n        dataAreaEnd := add(dataAreaEnd, 0x20)\n        sourceOffset := add(sourceOffset, 0x20)\n    }\n    mstore(paramsAreaOffset, takerAssetFillAmount)\n    paramsAreaOffset := add(paramsAreaOffset, 0x20)\n    mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n    sourceOffset := signature\n    arrayLenBytes := mload(sourceOffset)\n    sourceOffset := add(sourceOffset, 0x20)\n    arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n    mstore(dataAreaEnd, arrayLenBytes)\n    dataAreaEnd := add(dataAreaEnd, 0x20)\n    for {\n        let i := 0\n    }\n    lt(i, arrayLenWords)\n    {\n        i := add(i, 1)\n    }\n    {\n        mstore(dataAreaEnd, mload(sourceOffset))\n        dataAreaEnd := add(dataAreaEnd, 0x20)\n        sourceOffset := add(sourceOffset, 0x20)\n    }\n    mstore(fillOrderCalldata, sub(dataAreaEnd, add(fillOrderCalldata, 0x20)))\n    mstore(0x40, dataAreaEnd)\n}",
                  "src": "4288:6797:60"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 11802,
                    "name": "fillOrderCalldata",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 11799,
                    "src": "11086:17:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "functionReturnParameters": 11800,
                  "id": 11803,
                  "nodeType": "Return",
                  "src": "11079:24:60"
                }
              ]
            },
            "documentation": "@dev ABI encodes calldata for `fillOrder`.\n @param order Order struct containing order specifications.\n @param takerAssetFillAmount Desired amount of takerAsset to sell.\n @param signature Proof that order has been created by maker.\n @return ABI encoded calldata for `fillOrder`.",
            "id": 11805,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "abiEncodeFillOrder",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11797,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11792,
                  "name": "order",
                  "nodeType": "VariableDeclaration",
                  "scope": 11805,
                  "src": "1048:27:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Order_$12378_memory_ptr",
                    "typeString": "struct LibOrder.Order"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 11791,
                    "name": "LibOrder.Order",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 12378,
                    "src": "1048:14:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$12378_storage_ptr",
                      "typeString": "struct LibOrder.Order"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11794,
                  "name": "takerAssetFillAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 11805,
                  "src": "1085:28:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11793,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1085:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11796,
                  "name": "signature",
                  "nodeType": "VariableDeclaration",
                  "scope": 11805,
                  "src": "1123:22:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11795,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1123:5:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1038:113:60"
            },
            "payable": false,
            "returnParameters": {
              "id": 11800,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11799,
                  "name": "fillOrderCalldata",
                  "nodeType": "VariableDeclaration",
                  "scope": 11805,
                  "src": "1199:30:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11798,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1199:5:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1198:32:60"
            },
            "scope": 11806,
            "src": "1011:10099:60",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 11807,
        "src": "666:10446:60"
      }
    ],
    "src": "580:10533:60"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-10-16T20:38:35.367Z"
}